import hou
import toolutils

from baku_modules import EPSILON

EMPTY = -1
ZERO_VECTOR = hou.Vector3()

INTSERSECTOR_EDGE_SUBDIV = 20

class PointType:
    ANCHOR_MIDDLE, ANCHOR_FIRST, ANCHOR_LAST, INHANDLE, OUTHANDLE = (
        0, 1, 2, -1, -2)

    @staticmethod
    def isAnchor(type):
        return type >= 0

    @staticmethod
    def isEnd(type):
        return type >= 1


class HandleType:
    IN, OUT = (-1, +1)


class Curves():
    def __init__(self, node):
        self.node = node
        self.geo = self.node.node('./RESULT').geometry()

    def position(self, ptnum):
        return self.geo.point(ptnum).position()

    def setPosition(self, ptnum, position):
        point = self.geo.point(ptnum)
        anchor = point.attribValue('__anchor_ref')
        parm = self.node.parmTuple(point.attribValue('__parm'))

        if anchor != EMPTY:
            # Handle
            anchorPos = self.geo.point(anchor).position()
            position = position - anchorPos

        parm.set(position)

    def setAnchorValues(self, ptnum, anchor, inHandle, outHandle):
        point = self.geo.point(ptnum)

        anchor_parm = self.node.parmTuple(point.attribValue('__parm'))
        inhandle_parm = self.node.parmTuple(
            point.attribValue('__inhandle_parm'))
        outhandle_parm = self.node.parmTuple(
            point.attribValue('__outhandle_parm'))

        anchor_parm.set(anchor)
        inhandle_parm.set(inHandle)
        outhandle_parm.set(outHandle)

    def dragPosition(self, ptnum, position, break_handle=False):
        point = self.geo.point(ptnum)
        name = point.attribValue('__parm')
        anchor = point.attribValue('__anchor_ref')
        parm = self.node.parmTuple(name)

        if anchor == EMPTY:
            # Anchor
            parm.set(position)

        else:
            # Handle
            pointType = self.pointType(ptnum)

            if pointType == PointType.INHANDLE:
                oppositeName = name.replace('in', 'out')
            else:
                oppositeName = name.replace('out', 'in')

            oppositeParm = self.node.parmTuple(oppositeName)
            oppositeHandle = hou.Vector3(oppositeParm.eval())

            oldHandle = hou.Vector3(parm.eval())
            newHandle = position - self.position(anchor)

            # check if the anchor is smooth
            if not break_handle and abs(oldHandle.angleTo(oppositeHandle) - 180) < 0.01:

                # When smooth, sync with opposite handle
                oldLength = oldHandle.length()

                if oldLength < EPSILON:
                    lengthScale = 1
                else:
                    lengthScale = newHandle.length() / oldLength

                oppositeLength = oppositeHandle.length() * lengthScale
                oppositeHandle = -newHandle.normalized() * oppositeLength

                oppositeParm.set(oppositeHandle)

            # Set handle
            parm.set(newHandle)

    def allPoints(self, primnum):
        return [point.number() for point in self.geo.prim(primnum).points()]

    def primnum(self, ptnum):
        return self.geo.point(ptnum).prims()[0].number()

    def pointType(self, ptnum):
        return self.geo.point(ptnum).attribValue('__point_type')

    def numSegments(self, primnum):
        return self.node.parm('curve%d_segs' % (primnum + 1)).eval()

    def addCurve(self, anchor):
        curvenum = self._addMultiParm('curves')
        primnum = curvenum - 1
        segnum = self._addMultiParm('curve%d_segs' % curvenum)

        self.node.parmTuple('curve%d_anchor%d' %
                            (curvenum, segnum)).set(anchor)

        ptnum = self.geo.prim(primnum).points()[0].number()

        return ptnum

    def deleteCurve(self, primnum):
        self.node.parm('curves').removeMultiParmInstance(primnum)

    def addAnchor(self, ptnum, position, backward):

        point = self.geo.point(ptnum)
        primnum = point.prims()[0].number()

        curveName = 'curve%d' % (primnum + 1)
        vtxnum = 0

        seg = self._addMultiParm(curveName + '_segs', backward)
        vtxnum = (seg - 1) * 3

        self.node.parmTuple('%s_anchor%d' % (curveName, seg)).set(position)

        ptnum = self.geo.prim(primnum).points()[vtxnum].number()

        return ptnum

    def handle(self, ptnum, handleType=None):
        attribName = None

        if handleType != None:
            attribName = '__inhandle_parm' if handleType == HandleType.IN else '__outhandle_parm'
        else:
            attribName = '__parm'

        parmName = self.geo.point(ptnum).attribValue(attribName)

        return hou.Vector3(self.node.parmTuple(parmName).eval())

    def setHandle(self, ptnum, position, handleType=None):
        attribName = None
        if handleType != None:
            attribName = '__inhandle_parm' if handleType == HandleType.IN else '__outhandle_parm'
        else:
            attribName = '__parm'

        parmName = self.geo.point(ptnum).attribValue(attribName)

        if parmName == '':
            print('ERRORRRRR', ptnum, position, handleType)

        self.node.parmTuple(parmName).set(position)

    def getHandlePtnum(self, ptnum, handleType):
        attribName = '__inhandle_ref' if handleType == HandleType.IN else '__outhandle_ref'
        return self.geo.point(ptnum).attribValue(attribName)

    def getAnchorPtnum(self, ptnum):
        return self.geo.point(ptnum).attribValue('__anchor_ref')

    def closed(self, primnum):
        return self.geo.prim(primnum).isClosed()

    def setClosed(self, primnum, closed):
        self.node.parm('curve%s_closed' % (primnum + 1)).set(closed)

    def deletePoints(self, points):

        handles = []
        anchors = []

        for ptnum in sorted(points, reverse=True):
            if PointType.isAnchor(self.pointType(ptnum)):
                anchors.append(ptnum)
            else:
                handles.append(ptnum)

        # First, set the selected handles' tangent to zero
        for ptnum in handles:
            parmName = self.geo.point(ptnum).attribValue('__parm')
            self.node.parmTuple(parmName).set((0, 0, 0))

        # Then remove the entire segments of anchors
        for ptnum in anchors:
            parmName = self.geo.point(ptnum).attribValue('__parm')
            segnum = int(parmName.split('_')[1].replace('anchor', '')) - 1

            segParm = self.node.parmTuple(parmName).parentMultiParm()
            segParm.removeMultiParmInstance(segnum)

        # Cleanup empty curves
        curve_parm = self.node.parm('curves')
        numcurve = curve_parm.eval()

        for i in xrange(numcurve):
            curvenum = i + 1
            numseg = self.node.parm('curve%d_segs' % curvenum).eval()
            if numseg == 0:
                curve_parm.removeMultiParmInstance(i)

    def joinCurves(self, source_prim, target_prim, source_end, target_end):
        source_points, _ = self._curveData(source_prim)
        target_points, _ = self._curveData(target_prim)

        vtxnum = None

        if target_end == PointType.ANCHOR_LAST:
            target_points = reversed(target_points)

        if source_end == PointType.ANCHOR_LAST:
            vtxnum = len(source_points)
            source_points += target_points
        else:
            vtxnum = len(target_points) - 3
            source_points = target_points + source_points

        self._setCurveData(source_prim, (source_points, False))

        self.deleteCurve(target_prim)

        if target_prim < source_prim:
            source_prim -= 1

        ptnum = self.geo.prim(source_prim).points()[vtxnum].number()

        return ptnum

    def insertAnchor(self, bezier_ptnums, t):

        anchor0 = bezier_ptnums[0]

        # calc new beziers
        orig_bezier = [self.position(ptnum) for ptnum in bezier_ptnums]
        bezierA, bezierB = self._splitBezier(orig_bezier, t)

        # insert new line of segment
        parmName = self.geo.point(anchor0).attribValue('__parm')

        curvePrefix, anchorSuffix = parmName.split('_')

        segParm = self.node.parm(curvePrefix + '_segs')

        segnum0 = int(anchorSuffix.replace('anchor', ''))

        segParm.insertMultiParmInstance(segnum0)

        numseg = segParm.eval()

        segnum1 = segnum0 + 1
        segnum2 = 1 if segnum0 + 2 > numseg else segnum0 + 2

        # Set new points
        self.node.parmTuple('%s_outhandle%d' %
                            (curvePrefix, segnum0)).set(bezierA[1] - bezierA[0])
        self.node.parmTuple('%s_inhandle%d' %
                            (curvePrefix, segnum1)).set(bezierA[2] - bezierA[3])
        self.node.parmTuple('%s_anchor%d' %
                            (curvePrefix, segnum1)).set(bezierA[3])
        self.node.parmTuple('%s_outhandle%d' %
                            (curvePrefix, segnum1)).set(bezierB[1] - bezierB[0])
        self.node.parmTuple('%s_inhandle%d' %
                            (curvePrefix, segnum2)).set(bezierB[2] - bezierB[3])

        # calc new anchor's ptnum
        vtxnum = segnum0 * 3
        primnum = int(curvePrefix.replace('curve', '')) - 1

        new_anchor = self.geo.prim(primnum).points()[vtxnum].number()

        return new_anchor
    
    def cutCurveAtEdge(self, bezier_ptnums, t):
        new_anchor = self.insertAnchor(bezier_ptnums, t)
        self.cutCurveAtAnchor(new_anchor)

    def cutCurveAtAnchor(self, ptnum):
        parmName = self.geo.point(ptnum).attribValue('__parm')
        segnum = int(parmName.split('_')[1].replace('anchor', '')) - 1

        primnum = self.primnum(ptnum)
        closed = self.geo.prim(primnum).isClosed()
        positions, _ = self._curveData(primnum)

        if closed:
            newPositions = positions[segnum*3:] + positions[:(segnum+1)*3]
            self._setCurveData(primnum, (newPositions, False))

        else:
            if not PointType.isEnd(self.pointType(ptnum)):
                firstPositions = positions[:(segnum+1)*3]
                secondPositions = positions[segnum*3:]

                firstPrimnum = primnum
                secondPrimnum = self._addMultiParm('curves') - 1

                self._setCurveData(firstPrimnum, (firstPositions, False))
                self._setCurveData(secondPrimnum, (secondPositions, False))

    def reverseCurve(self, primnum):
        positions, closed = self._curveData(primnum)
        positions.reverse()

        self._setCurveData(primnum, (positions, closed))

    def bezierSegmentAtEdge(self, edge, position):

        p0, p1 = edge.points()

        pos0 = p0.position()
        pos1 = p1.position()

        edge_pos = 0
        if pos0.distanceTo(pos1) > EPSILON:
            edge_pos = pos0.distanceTo(position) / pos0.distanceTo(pos1)

        primnum = p0.prims()[0].number()
        points = p0.prims()[0].points()

        index0 = points.index(p0)
        index1 = points.index(p1)

        # get ptnums of 4 points of bezier including the edge
        bezier_points = self.geo.prim(primnum).points()
        numvtx = len(bezier_points)
        segindex = index0 / INTSERSECTOR_EDGE_SUBDIV

        ptnum0 = bezier_points[segindex * 3].number()
        ptnum1 = bezier_points[segindex * 3 + 1].number()
        ptnum2 = bezier_points[segindex * 3 + 2].number()
        ptnum3 = bezier_points[(segindex * 3 + 3) % numvtx].number()

        # calc parameter T
        t0 = float(index0) / INTSERSECTOR_EDGE_SUBDIV % 1
        t1 = float(index1) / INTSERSECTOR_EDGE_SUBDIV % 1

        if t1 == 0:
            t1 = 1

        t = (t1 - t0) * edge_pos + t0

        return ((ptnum0, ptnum1, ptnum2, ptnum3), t)
            

    def _addMultiParm(self, name, backward=False):
        parm = self.node.parm(name)
        insertPos = 0 if backward else parm.eval()
        parm.insertMultiParmInstance(insertPos)
        index = insertPos + 1
        return index

    def _curveData(self, primnum):
        prefix = 'curve%d' % (primnum + 1)
        numseg = self.node.parm(prefix + '_segs').eval()

        closed = self.node.parm(prefix + '_closed').eval()

        positions = []

        for segnum in xrange(1, numseg + 1):
            positions.append(self.node.parmTuple(
                '%s_inhandle%d' % (prefix, segnum)).eval())
            positions.append(self.node.parmTuple(
                '%s_anchor%d' % (prefix, segnum)).eval())
            positions.append(self.node.parmTuple(
                '%s_outhandle%d' % (prefix, segnum)).eval())

        return (positions, closed)

    def _setCurveData(self, primnum, data):
        prefix = 'curve%d' % (primnum + 1)

        segParm = self.node.parm(prefix + '_segs')

        # Delete all segments at first
        for i in xrange(segParm.eval()):
            segParm.removeMultiParmInstance(0)

        positions, closed = data

        numseg = len(positions) / 3

        for i in xrange(numseg):
            segnum = i + 1
            segParm.insertMultiParmInstance(i)
            self.node.parmTuple('%s_inhandle%d' %
                                (prefix, segnum)).set(positions[i*3])
            self.node.parmTuple('%s_anchor%d' %
                                (prefix, segnum)).set(positions[i*3 + 1])
            self.node.parmTuple('%s_outhandle%d' %
                                (prefix, segnum)).set(positions[i*3 + 2])

        self.node.parm('%s_closed' % prefix).set(closed)

    def _splitBezier(self, bezier, t):

        p0, p1, p2, p3 = bezier

        p4 = p0 + (p1 - p0) * t
        p5 = p1 + (p2 - p1) * t
        p6 = p2 + (p3 - p2) * t
        p7 = p4 + (p5 - p4) * t
        p8 = p5 + (p6 - p5) * t
        p9 = p7 + (p8 - p7) * t

        return ((p0, p4, p7, p9), (p9, p8, p6, p3))

# -------------------------------------------------------
# Callbacks by UI

def updatePivotCache():
    try:
        toolutils.sceneViewer().runStateCommand('update_pivot_cache')
    except:
        pass

def resetTransform(mode):
    try:
        toolutils.sceneViewer().runStateCommand('reset_translate', {})
    except:
        pass

def clearAll():
    node = hou.pwd()
    node.parm('curves').revertToDefaults()
    node.parm('selection').revertToDefaults()

    try:
        toolutils.sceneViewer().runStateCommand(' ', {})
    except:
        pass

def convertToBezier(prim):
    prim_type = prim.type()
    
    if prim_type == hou.primType.Polygon:

        bezier_points = []
        closed = prim.isClosed()
        
        polygon_points = [p.position() for p in prim.points()]
        numpt = len(polygon_points)

        for i, p in enumerate(polygon_points):

            if i == 0 or (closed and i == numpt - 1):
                bezier_points.extend([p, p])
            else:
                bezier_points.extend([p, p, p])
        
        if closed:
            bezier_points.append(polygon_points[0])
        
        return [bezier_points, closed]
    
    elif prim_type in (hou.primType.NURBSCurve, hou.primType.Circle):
        
        # Create new geometry which has only one prims
        primnum = prim.number()
        source_geo = hou.Geometry(prim.geometry())
        prims_to_delete = [pr for pr in source_geo.prims() if pr.number() != primnum]
        source_geo.deletePrims(prims_to_delete)

        geo = hou.Geometry()
        convert_verb = hou.sopNodeTypeCategory().nodeVerbs()['convert']
        convert_verb.setParms({'totype': 2})
        convert_verb.execute(geo, [source_geo])

        prim_type = hou.primType.BezierCurve
        prim = geo.prim(0)

    # Bezier
    if prim_type == hou.primType.BezierCurve:

        points = [p.position() for p in prim.points()]
        closed = prim.isClosed()

        return [points, closed]
    
    return None

def fetchSource():
    node = hou.pwd()

    geo = node.inputs()[0].geometry() if len(
        node.inputs()) > 0 else hou.Geometry()

    with hou.undos.group('Fetch source'):

        if node.parm('fetch_add_to_existing').eval() == 0:
            clearAll()

        curves = Curves(node)

        for prim in geo.iterPrims():

            result = convertToBezier(prim)

            if result == None:
                continue

            points, closed = result
            numpt = len(points)

            ptnum = None

            for i in xrange(0, numpt, 3):

                anchor = points[i]

                inhandle = points[i-1] if i > 0 else None
                outhandle = points[i+1] if i < numpt - 1 else None

                if i == 0:
                    ptnum = curves.addCurve(anchor)
                else:
                    ptnum = curves.addAnchor(ptnum, anchor, backward=False)

                if i > 0:
                    inhandle = points[i-1]
                    curves.setHandle(ptnum, inhandle -
                                     anchor, HandleType.IN)
                elif i == 0 and closed:
                    inhandle = points[numpt-1]
                    curves.setHandle(ptnum, inhandle -
                                     anchor, HandleType.IN)

                if i < numpt - 1:
                    outhandle = points[i+1]
                    curves.setHandle(ptnum, outhandle -
                                     anchor, HandleType.OUT)

            if closed:
                primnum = curves.primnum(ptnum)
                curves.setClosed(primnum, True)

# -------------------------------------------------------
# Initialize

def reloadViewerState():
    nodetype = kwargs['type']
    name = nodetype.definition().sections()['DefaultState'].contents()
    hou.ui.reloadViewerState(name)
